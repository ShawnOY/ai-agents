requirements_analysis:
  description: |
    ## Requirements Analysis Task
    Perform analysis based on the following stakeholder needs topic:
    {topic}

    ## Execution Steps
    1. **Requirements Consolidation**: Summarize and structure all stakeholder requirements.
    2. **Requirements Categorization**: Break down requirements into the following categories:
       - Functional Requirements
       - Non-Functional Requirements (performance, security, usability, etc.)
       - Business Requirements
       - User Requirements
    3. **Visualization Design**:
       - Create a Use Case Diagram using Mermaid.
       - Create a User Flow Diagram using Mermaid.
    4. **User Story Writing**: Write User Stories based on the analysis results.

  expected_output: |
    ## Requirements Analysis Report
    - Consolidated Stakeholder Requirements (Structured Document)
    - Functional Requirements Specification
    - Non-Functional Requirements Specification
    - Business Requirements Document
    - User Requirements Document
    - Mermaid Use Case Diagram Code
    - List of User Stories
    - Mermaid User Flow Diagram Code

  agent: project_manager
  output_file: output/requirements_analysis.md

requirements_specification:
  description: |
    ## Functional Specification Development Task
    Develop a detailed functional specification document based on the requirements analysis results.

    ## Execution Steps
    1. Translate requirements into specific functional specifications.
    2. Define detailed behavior, input/output, and interface specifications for each function.
    3. Establish Acceptance Criteria.
    4. Consider technical constraints and dependencies.

  expected_output: |
    ## Functional Specification Document
    - Functional module division and description.
    - Detailed functional specifications (including interface definitions).
    - List of Acceptance Criteria.
    - Testing strategy and verification criteria.

  agent: system_analyst
  context: [requirements_analysis]
  output_file: output/requirements_specification.md

system_design:
  description: |
    ## System Architecture Design Task
    Design the system technical architecture based on the functional specifications.

    ## Execution Steps
    1. Analyze functional requirements to determine the high-level system architecture.
    2. Design the system component architecture:
       - Frontend architecture
       - Backend architecture
       - Database design
       - Cloud services/Infrastructure
    3. Make technology selections:
       - Programming languages
       - Frameworks and libraries
       - Third-party services

  expected_output: |
    ## System Architecture Design Document
    - High-Level Architecture Diagram (Mermaid)
    - Component Architecture Diagram (Mermaid)
    - Technology Stack Description
    - Infrastructure Plan

  agent: architect
  context: [requirements_analysis, requirements_specification]
  output_file: output/system_architecture.md

project_task_planning:
  description: |
    ## Project Task Planning Task
    Create a detailed project development task plan based on the functional specifications.

    ## Execution Steps
    1. Break down functional specifications into executable development tasks.
    2. Estimate the effort and priority for each task.
    3. Structure the task data according to the Jira format.

  expected_output: |
    ## Jira Task List (JSON Format)
    Requirements:
    - Pure JSON object compliant with Jira API format.
    - Includes task summary, description, acceptance criteria, and priority.
    - Uses the specified project key (SAN) and issue type (Task).

    Format example:
    [
      {
        "project_key": "SAN",
        "summary": "Task summary",
        "issue_type": "Task",
        "description": "## Task Objective\nObjective description\n## Detailed Specifications\nFunctional specifications\n## Acceptance Criteria\n- Criterion 1\n- Criterion 2",
        "priority": {"name": "High"}
      }
    ]

  agent: project_manager
  context: [requirements_analysis, requirements_specification]

jira_task_creation:
  description: |
    ## Jira Task Creation Task
    Batch add the planned tasks to the SAN project Backlog in Jira.

    ## Notes
    - Ensure the connection configuration to the Jira system is correct.
    - Verify the completeness and format of the task data.
    - Provide feedback on the creation results.

  expected_output: |
    ## Task Creation Results
    - List of successfully created tasks.
    - Any error or warning messages.
    - List of created Issue keys (e.g., SAN-123, SAN-124, etc.).

  agent: project_manager
  context: [project_task_planning]

write_code:
  description: |
    ## Write Code Task
    Write code for the tasks in the Jira project.
    - The code should be written in the same language as the task description.
    - The code should be written in a modular and maintainable way.
    - The code should follow best practices and coding standards.
    - The code should be well-documented.
    - The code should include error handling and logging.
    - The code should be tested and verified.
    - The code should be optimized for performance.
    - The code should be secure.
    - The code should include unit tests.
    - The code should include integration tests.
    - The code should include end-to-end tests.
    - The code should include performance tests.
    - The code should include security tests.
    - The code should include usability tests.
    - The code should include accessibility tests.
    - The code should include documentation.

  expected_output: |
    ## Code Writing Results
    - Full source code
    - Unit tests
    - Integration tests
    - End-to-end tests
    - Performance tests
    - Security tests
    - Usability tests
    - Accessibility tests
    - Documentation

  output_file: output/code_writing_results.md

  agent: fullstack_engineer
  context: [jira_task_creation]